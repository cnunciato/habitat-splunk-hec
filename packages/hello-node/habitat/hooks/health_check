#!/bin/sh

# Source is this service's health-check endpoint. It's assumed the endpoint will
# return a JSON body containing at least an HTTP status and associated message;
# for example: { "status": 200, "message": "OK" }
source_opts='{
  "port": {{ cfg.port }},
  "path": "/health"
}'

# Destination is the (optional) HTTP endpoint to which to forward the health-check response.
# You can forward to any HTTP endpoint reachable by the node on which this service is running.
# If you include no destination options, health_check will simply exit with an exit code
# corresponding to your service's HTTP status code.
destination_opts=""

# Here, we're using the hello-splunk service, which is Splunk HEC-aware, as our destination
# endpoint. That service will craft an appropriately shaped message based on our service's
# health-check response and submit it to Splunk. Other services running on this node can use
# the same service as well.
{{~#if bind.splunk.first.alive}}
destination_opts='{
  "hostname": "{{ bind.splunk.first.sys.ip }}",
  "port": {{ bind.splunk.first.cfg.port }},
  "path": "/",
  "method": "POST",
  "headers": {
    "Content-Type": "application/json"
  }
}'
#{{~/if}}

# This is optional, but it might be a good idea to forward a snapshot of this service
# definition as well. http-health-check will honor this object if it's passed in.
service='{{ toJson svc.me }}'

exec "{{ pkgPathFor "cnunciato/http-health-check" }}/bin/http-health-check" "$source_opts" "$destination_opts" "$service" 2>&1
