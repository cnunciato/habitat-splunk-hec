#!{{ pkgPathFor "core/node" }}/bin/node

const http = require('http');
let healthCheckStatus;
let healthCheckMessage;

http.get('http://localhost:{{ cfg.port }}/health', res => {
  res.setEncoding('utf8');

  let health = '';

  res.on('data', data => {
    health += data;
  });

  res.on('end', () => {
    try {
      const body = JSON.parse(health);

      healthCheckStatus = body.status || res.status;
      healthCheckMessage = body.message;
      body.service = {{ toJson svc.me }};

      {{~#if bind.splunk.first.alive}}
      const opts = {
        hostname: '{{ bind.splunk.first.sys.ip }}',
        port: {{ bind.splunk.first.cfg.port }},
        path: '/',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      };

      const req = http.request(opts);

      req.on('error', e => {
        handleExit(1, e.message);
      });

      req.write(JSON.stringify(body));
      req.end();
      {{~/if}}
    } catch (e) {
      handleExit(1, e.message);
    }
  });

  process.on('beforeExit', code => {
    handleExit(code);
  });
})
.on('error', e => {
  handleExit(1, e.message);
});

function handleExit(code, message) {
  let exitCode = code;

  if (healthCheckStatus) {
    if (healthCheckStatus >= 500) {
      exitCode = 2;
    }
    else if (healthCheckStatus >= 300) {
      exitCode = 1;
    }
  }

  if (exitCode !== 0) {
    console.error(`Exiting with nonzero status ${exitCode}: ${message || healthCheckMessage || '(No message provided)'}`);
  }

  process.exit(code);
}
